{"version":3,"sources":["components/RoutineCard.js","backend/helpers.js","backend/Routine.js","backend/routes.js","components/Todos.js","components/PieChart.js","components/MinutesSpent.js","components/Log.js","components/CompareDays.js","components/Done.js","App.js","serviceWorker.js","components/AddRoutine.js","components/Help.js","components/ViewRoutines.js","components/Alert.js","components/Graph.js","components/Calendar.js","components/RoutineZoomed.js","components/Stats.js","index.js"],"names":["RoutineCard","state","doneButton","routinePercentage","routine","Math","round","numTimesDone","getTimesShouldDone","this","props","setState","zoom","Card","bg","style","cardStyle","className","Img","variant","src","imageLink","Body","Title","color","to","name","Text","getTotalTimeSpent","Button","onClick","markRoutineAsDone","bind","React","Component","width","margin","borderRadius","border","getDayOfWeek","date","Date","getTime","today","getDay","getDayOfMonth","getDate","getMonth","getArray","n","m","defaultVal","ans","i","curr","j","push","save","key","value","localStorage","setItem","getDaysInMonths","month","year","getWeekOf","dayOfMonth","reverse","Routine","type","days","estimation","tag","toggle","day","done","markDone","addedInfo","minutes","info","timeNeeded","touchTime","getHours","getMinutes","todayStatus","dayOfWeek","active","d","getStartTime","comp","finishTime","hrEnd","minEnd","toNum","getDuration","start","floor","parseInt","getRoutines","getItem","JSON","parse","map","Object","assign","routines","getRoutineByName","addRoutine","weekSchedule","time","url","newRoutine","stringify","deactivateRoutineByName","activateRoutineByName","deletRoutineByName","length","splice","getTodaysRoutines","filter","getPercentageDone","week","all","getTimeSpent","f","getNumRoutinesDone","getRoutineByDay","Todos","showModal","Modal","show","onHide","routineDoneName","animation","Header","closeButton","Form","Group","controlId","Label","Control","placeholder","defaultValue","e","form","target","parentElement","comment","Footer","routineName","Fragment","flexContainerStyle","display","flexWrap","getGraph","data","height","chartType","loader","options","title","backgroundColor","MinutesSpent","showMetric","numDays","hAxis","Log","hr","sort","x","y","Table","striped","bordered","hover","CompareDays","getData","monthComp","dayOfMonthComp","found","done1","done2","update","Test","useState","startDate","setStartDate","selected","onChange","alert","Done","flexGrow","App","todo","ButtonGroup","aria-label","ProgressBar","now","label","Boolean","window","location","hostname","match","AddRoutine","clickWeekend","checkboxList","document","querySelectorAll","checked","clickAll","forEach","checkbox","handleSubmit","routineTpye","routineUrl","routineTime","id","href","Help","ViewRoutines","AlertDismissible","Alert","onClose","dismissible","Heading","header","rootProps","numWeeks","doneArray","currTime","rem","labels","cnt","sz","min","pop","Calendar","getDayOfWeekGivenMYD","calendar","cellColor","stroke","strokeOpacity","strokeWidth","colors","RoutineZoomed","activateDeactivateButton","getStatus","status","showAlert","Container","Row","Col","containerStyle","justifyContent","LastDays","CommentDistribution","dates","toDateString","padding","Map","has","get","set","Stats","RoutinesFrequency","HeatMap","Zoom","useParams","ReactDOM","render","basename","StrictMode","Navbar","Brand","Nav","Link","exact","path","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88899315.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n// import pic from \"../assets/sports1.png\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class RoutineCard extends React.Component {\r\n  state = { doneButton: false };\r\n  componentDidMount() {\r\n    if (this.props.doneButton) this.setState({ doneButton: true });\r\n  }\r\n  routinePercentage = (routine) =>\r\n    Math.round((routine.numTimesDone() * 100) / routine.getTimesShouldDone());\r\n  render() {\r\n    const routine = this.props.routine;\r\n    const zoom = this.props.zoom;\r\n    return (\r\n      <Card bg=\"info\" style={cardStyle} className=\"text-center\">\r\n        <Card.Img variant=\"top\" src={routine.imageLink}></Card.Img>\r\n\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <Link style={{ color: \"black\" }} to={`/routines/${routine.name}`}>\r\n              {routine.name}\r\n            </Link>\r\n          </Card.Title>\r\n          {zoom && (\r\n            <Card.Text>\r\n              {`${routine.numTimesDone()}/${routine.getTimesShouldDone()}`}\r\n              <br></br>\r\n              {`${this.routinePercentage(routine)}%`}\r\n              <br></br>\r\n              {`${routine.getTotalTimeSpent()} Minutes Spent`}\r\n            </Card.Text>\r\n          )}\r\n          {this.state.doneButton && (\r\n            <Button\r\n              variant=\"danger\"\r\n              onClick={this.props.markRoutineAsDone.bind(this, routine.name)}\r\n            >\r\n              Mark as Done\r\n            </Button>\r\n          )}\r\n          {!zoom && (\r\n            <Button variant=\"success\">\r\n              <Link style={{ color: \"black\" }} to={`/routines/${routine.name}`}>\r\n                See More\r\n              </Link>\r\n            </Button>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nconst cardStyle = {\r\n  width: \"250px\",\r\n  margin: \"10px\",\r\n  borderRadius: \"8px\",\r\n  border: \"2px solid\",\r\n};\r\n","const FOUR_HOURS = 4 * 60 * 60 * 1000;\r\n\r\nconst getDayOfWeek = (date = new Date(new Date().getTime() - FOUR_HOURS)) => {\r\n  let today = date.getDay() - 1;\r\n  if (today < 0) today += 7;\r\n  return today;\r\n};\r\nconst getDayOfMonth = (date = new Date(new Date().getTime() - FOUR_HOURS)) =>\r\n  date.getDate() - 1;\r\nconst getMonth = (date = new Date(new Date().getTime() - FOUR_HOURS)) =>\r\n  date.getMonth();\r\n\r\nconst getArray = (n, m, defaultVal) => {\r\n  let ans = [];\r\n  for (let i = 0; i < n; i++) {\r\n    let curr = [];\r\n    for (let j = 0; j < m; j++) curr.push(defaultVal);\r\n    ans.push(curr);\r\n  }\r\n  return ans;\r\n};\r\nconst readFromLocalStorage = (key) => localStorage.getItem(key);\r\nconst save = (key, value) => localStorage.setItem(key, value);\r\nconst getDaysInMonths = (month, year = 2020) =>\r\n  new Date(year, month + 1, 0).getDate();\r\nconst getWeekOf = (month, dayOfMonth) => {\r\n  let curr = new Date(2020, month, dayOfMonth + 1);\r\n  let ans = [];\r\n  while (true) {\r\n    curr = new Date(curr.getTime() + 24 * 60 * 60 * 1000);\r\n    if (getDayOfWeek(curr) === 0) break;\r\n    ans.push([getMonth(curr), getDayOfMonth(curr)]);\r\n  }\r\n  ans.reverse();\r\n  curr = new Date(2020, month, dayOfMonth + 1);\r\n  while (true) {\r\n    ans.push([getMonth(curr), getDayOfMonth(curr)]);\r\n    if (getDayOfWeek(curr) === 0) break;\r\n    curr = new Date(curr.getTime() - 24 * 60 * 60 * 1000);\r\n  }\r\n  ans.reverse();\r\n  return ans;\r\n};\r\nexport {\r\n  getDayOfWeek,\r\n  getDayOfMonth,\r\n  getMonth,\r\n  getArray,\r\n  readFromLocalStorage,\r\n  save,\r\n  getDaysInMonths,\r\n  getWeekOf,\r\n};\r\n","import {\r\n  getDayOfMonth,\r\n  getMonth,\r\n  getArray,\r\n  getDayOfWeek,\r\n  getDaysInMonths,\r\n} from \"./helpers\";\r\nexport default class Routine {\r\n  constructor(\r\n    name,\r\n    type,\r\n    days = [false, false, false, false, false, false, false],\r\n    estimation,\r\n    imageLink = \"\",\r\n    tag\r\n  ) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.days = days;\r\n    this.estimation = estimation;\r\n    this.imageLink = imageLink;\r\n    this.tag = tag;\r\n    this.done = getArray(12, 31, false);\r\n    this.info = getArray(12, 31, \"\");\r\n    this.active = getArray(12, 31, true);\r\n    this.timeNeeded = getArray(12, 31, 0);\r\n    this.touchTime = getArray(12, 31, [0, 0]);\r\n    const month = getMonth();\r\n    const day = getDayOfMonth();\r\n    for (let m = month; m < 12; m++)\r\n      for (let d = m === month ? day : 0; d < getDaysInMonths(m); d++)\r\n        this.active[m][d] = true;\r\n  }\r\n  toggle = () => {\r\n    let month = getMonth(),\r\n      day = getDayOfMonth();\r\n    this.done[month][day] = !this.done[month][day];\r\n  };\r\n  markDone = (addedInfo, minutes) => {\r\n    let month = getMonth(),\r\n      day = getDayOfMonth();\r\n    this.done[month][day] = true;\r\n    this.info[month][day] = addedInfo;\r\n    this.timeNeeded[month][day] = minutes;\r\n    const today = new Date();\r\n    this.touchTime[month][day] = [today.getHours(), today.getMinutes()];\r\n  };\r\n  // returns 1 if did today, -1 if should have been done but didn't and 0 otherwise\r\n  todayStatus = () => {\r\n    const month = getMonth();\r\n    const dayOfMonth = getDayOfMonth();\r\n    const dayOfWeek = getDayOfWeek();\r\n    if (this.days[dayOfWeek] && this.active[month][dayOfMonth])\r\n      return this.done[month][dayOfMonth] ? 1 : -1;\r\n    else return 0;\r\n  };\r\n  numTimesDone = () => {\r\n    let ans = 0;\r\n    for (let m = 0; m < 12; m++)\r\n      for (let d = 0; d < 31; d++) ans += this.done[m][d] ? 1 : 0;\r\n    return ans;\r\n  };\r\n  getStartTime = (month, dayOfMonth, comp = false) => {\r\n    const finishTime = this.touchTime[month][dayOfMonth];\r\n    const hrEnd = finishTime[0],\r\n      minEnd = finishTime[1];\r\n    const toNum = hrEnd * 60 + minEnd;\r\n    let ans = toNum - this.timeNeeded[month][dayOfMonth];\r\n    if (ans < 0) ans += 24 * 60;\r\n    if (comp && ans < 4 * 60) ans += 24 * 60;\r\n    return ans;\r\n  };\r\n  getDuration = (month, dayOfMonth) => {\r\n    let start = this.getStartTime(month, dayOfMonth);\r\n    return `${Math.floor(start / 60)}:${start % 60} - ${\r\n      this.touchTime[month][dayOfMonth][0]\r\n    }:${this.touchTime[month][dayOfMonth][1]}`;\r\n  };\r\n  getTimesShouldDone = () => {\r\n    let ans = 0;\r\n    // revise the fact that the day stars at 4 am\r\n    for (let m = 0; m < 12; m++)\r\n      for (let d = 0; d < 31; d++) {\r\n        let date = new Date(2020, m, d);\r\n        if (date > new Date()) break;\r\n        if (this.active[m][d] && this.days[getDayOfWeek(date)]) ans++;\r\n      }\r\n    return ans;\r\n  };\r\n  getTotalTimeSpent = () => {\r\n    let ans = 0;\r\n    for (let m = 0; m < 12; m++)\r\n      for (let d = 0; d < 31; d++) ans += parseInt(this.timeNeeded[m][d]);\r\n    return ans;\r\n  };\r\n}\r\n","import Routine from \"./Routine\";\r\nimport {\r\n  readFromLocalStorage,\r\n  save,\r\n  getDayOfMonth,\r\n  getMonth,\r\n  getDayOfWeek,\r\n  getWeekOf,\r\n} from \"./helpers\";\r\nconst getRoutines = () => {\r\n  if (localStorage.getItem(\"routines\") === null) {\r\n    return [];\r\n  }\r\n  return JSON.parse(readFromLocalStorage(\"routines\")).map((routine) =>\r\n    Object.assign(new Routine(), routine)\r\n  );\r\n};\r\nconst routines = getRoutines();\r\n\r\nconst getRoutineByName = (name) => {\r\n  for (const routine of routines) if (routine.name === name) return routine;\r\n};\r\nconst toggleRoutineByName = (name) => {\r\n  getRoutineByName(name).toggle();\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst addRoutine = (name, type, weekSchedule, time, url) => {\r\n  const newRoutine = new Routine(name, type, weekSchedule, time, url);\r\n  routines.push(newRoutine);\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst markRoutineAsDone = (name, addedInfo, minutes) => {\r\n  getRoutineByName(name).markDone(addedInfo, minutes);\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst deactivateRoutineByName = (name) => {\r\n  const month = getMonth();\r\n  const day = getDayOfMonth();\r\n  for (const routine of routines)\r\n    if (routine.name === name) {\r\n      for (let m = month; m < 12; m++)\r\n        for (let d = m === month ? day : 0; d < 31; d++)\r\n          routine.active[m][d] = false;\r\n    }\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst activateRoutineByName = (name) => {\r\n  const month = getMonth();\r\n  const day = getDayOfMonth();\r\n  for (const routine of routines)\r\n    if (routine.name === name) {\r\n      for (let m = month; m < 12; m++)\r\n        for (let d = m === month ? day : 0; d < 31; d++)\r\n          routine.active[m][d] = true;\r\n    }\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst deletRoutineByName = (name) => {\r\n  for (let i = 0; i < routines.length; i++)\r\n    if (routines[i].name === name) {\r\n      routines.splice(i, 1);\r\n      break;\r\n    }\r\n  save(\"routines\", JSON.stringify(routines));\r\n};\r\nconst getAcitveRoutines = () => {\r\n  const month = getMonth();\r\n  const dayOfMonth = getDayOfMonth();\r\n  return routines.filter((routine) => routine.active[month][dayOfMonth]);\r\n};\r\nconst getTodaysRoutines = () => {\r\n  const month = getMonth();\r\n  const dayOfMonth = getDayOfMonth();\r\n  const dayOfWeek = getDayOfWeek();\r\n  return routines.filter(\r\n    (routine) => routine.active[month][dayOfMonth] && routine.days[dayOfWeek]\r\n  );\r\n};\r\nconst getPercentageDone = (\r\n  month = getMonth(),\r\n  dayOfMonth = getDayOfMonth(),\r\n  state = 0\r\n) => {\r\n  if (state === 0)\r\n    return (\r\n      (getTodaysRoutines().filter((routine) => routine.done[month][dayOfMonth])\r\n        .length /\r\n        routines.length) *\r\n      100\r\n    );\r\n  else if (state === 1) {\r\n    const week = getWeekOf(month, dayOfMonth);\r\n    let done = 0,\r\n      all = 0;\r\n    for (const routine of routines)\r\n      for (let day = 0; day < 7; day++) {\r\n        let date = week[day];\r\n        if (!routine.active[date[0]][date[1]] || !routine.days[day]) continue;\r\n        all++;\r\n        done += routine.done[date[0]][date[1]] ? 1 : 0;\r\n      }\r\n    return (done / all) * 100;\r\n  } else if (state === 2) {\r\n    let done = 0,\r\n      all = 0;\r\n    for (const routine of routines)\r\n      for (let day = 0; day < 31; day++) {\r\n        const date = new Date(2020, month, day + 1);\r\n        let dayOfWeek = getDayOfWeek(date) + 1;\r\n        if (dayOfWeek === 7) dayOfWeek = 0;\r\n        if (!routine.active[month][day] || !routine.days[dayOfWeek]) continue;\r\n        all++;\r\n        done += routine.done[month][day] ? 1 : 0;\r\n      }\r\n    return (done / all) * 100;\r\n  }\r\n};\r\nconst getTimeSpent = (\r\n  month = getMonth(),\r\n  dayOfMonth = getDayOfMonth(),\r\n  state = 0\r\n) => {\r\n  if (state === 0) {\r\n    let ans = 0;\r\n    for (const routine of routines) {\r\n      ans += parseInt(routine.timeNeeded[month][dayOfMonth]);\r\n    }\r\n    return ans;\r\n  } else if (state === 1) {\r\n    let curr = new Date(2020, month, dayOfMonth + 1);\r\n    let ans = 0;\r\n    while (true) {\r\n      curr = new Date(curr.getTime() + 24 * 60 * 60 * 1000);\r\n      if (getDayOfWeek(curr) === 0) break;\r\n      for (const routine of routines)\r\n        ans += parseInt(\r\n          routine.timeNeeded[getMonth(curr)][getDayOfMonth(curr)]\r\n        );\r\n    }\r\n    curr = new Date(2020, month, dayOfMonth + 1);\r\n    while (true) {\r\n      for (const routine of routines)\r\n        ans += parseInt(\r\n          routine.timeNeeded[getMonth(curr)][getDayOfMonth(curr)]\r\n        );\r\n      if (getDayOfWeek(curr) === 0) break;\r\n      curr = new Date(curr.getTime() - 24 * 60 * 60 * 1000);\r\n    }\r\n    return ans;\r\n  } else if (state === 2) {\r\n    let ans = 0;\r\n    for (let day = 0; day < 31; day++)\r\n      for (const routine of routines)\r\n        ans += parseInt(routine.timeNeeded[month][day]);\r\n    return ans;\r\n  }\r\n};\r\n\r\nconst getNumRoutinesDone = (\r\n  month = getMonth(),\r\n  dayOfMonth = getDayOfMonth(),\r\n  state = 0\r\n) => {\r\n  if (state === 0) {\r\n    let ans = 0;\r\n    for (const routine of routines) {\r\n      ans += routine.done[month][dayOfMonth] ? 1 : 0;\r\n    }\r\n    return ans;\r\n  } else if (state === 1) {\r\n    let ans = 0;\r\n    const week = getWeekOf(month, dayOfMonth);\r\n    for (const routine of routines)\r\n      for (const date of week) ans += routine.done[date[0]][date[1]] ? 1 : 0;\r\n    return ans;\r\n  } else if (state === 2) {\r\n    let ans = 0;\r\n    for (let day = 0; day < 31; day++)\r\n      for (const routine of routines) ans += routine.done[month][day] ? 1 : 0;\r\n    return ans;\r\n  }\r\n};\r\nconst getRoutineByDay = (month = getMonth(), dayOfMonth = getDayOfMonth()) => {\r\n  const date = new Date(2020, month, dayOfMonth + 1);\r\n  let dayOfWeek = date.getDay() - 1;\r\n  if (dayOfWeek < 0) dayOfWeek += 7;\r\n  return routines.filter(\r\n    (routine) => routine.active[month][dayOfMonth] && routine.days[dayOfWeek]\r\n  );\r\n};\r\nexport {\r\n  getRoutines,\r\n  getRoutineByName,\r\n  addRoutine,\r\n  toggleRoutineByName,\r\n  markRoutineAsDone,\r\n  deactivateRoutineByName,\r\n  deletRoutineByName,\r\n  activateRoutineByName,\r\n  getAcitveRoutines,\r\n  getTodaysRoutines,\r\n  getPercentageDone,\r\n  getTimeSpent,\r\n  getRoutineByDay,\r\n  getNumRoutinesDone,\r\n};\r\n","import React from \"react\";\r\nimport RoutineCard from \"./RoutineCard\";\r\nimport {\r\n  getTodaysRoutines,\r\n  markRoutineAsDone,\r\n  getRoutineByName,\r\n} from \"../backend/routes\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport default class Todos extends React.Component {\r\n  state = {\r\n    routines: [],\r\n    showModal: false,\r\n  };\r\n  Modal = () => {\r\n    const handleSubmit = (e) => {\r\n      const form = e.target.parentElement;\r\n      const time = form.time.value;\r\n      const comment = form.comment.value;\r\n      const month = getMonth();\r\n      const dayOfMonth = getDayOfMonth();\r\n      markRoutineAsDone(this.state.routineDoneName, comment, time);\r\n      this.setState({\r\n        routines: getTodaysRoutines().filter(\r\n          (routine) => !routine.done[month][dayOfMonth]\r\n        ),\r\n        showModal: false,\r\n      });\r\n    };\r\n    return (\r\n      <>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          onHide={() => {\r\n            this.setState({ showModal: false, routineDoneName: \"\" });\r\n          }}\r\n          animation={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group controlId=\"time\">\r\n                <Form.Label>Time</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"Time in Minutes\"\r\n                  name=\"time\"\r\n                  defaultValue={\r\n                    getRoutineByName(this.state.routineDoneName).estimation\r\n                  }\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"comment\">\r\n                <Form.Label>Comment</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter A comment\"\r\n                  name=\"comment\"\r\n                />\r\n              </Form.Group>\r\n              <Button variant=\"primary\" onClick={handleSubmit}>\r\n                Mark as Done\r\n              </Button>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() =>\r\n                this.setState({ showModal: false, routineDoneName: \"\" })\r\n              }\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  };\r\n  componentDidMount() {\r\n    const month = getMonth();\r\n    const dayOfMonth = getDayOfMonth();\r\n    this.setState({\r\n      routines: getTodaysRoutines().filter(\r\n        (routine) => !routine.done[month][dayOfMonth]\r\n      ),\r\n    });\r\n  }\r\n  markRoutineAsDone = (routineName) => {\r\n    this.setState({ showModal: true });\r\n    this.setState({ routineDoneName: routineName });\r\n  };\r\n  render() {\r\n    const routines = this.state.routines;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div style={flexContainerStyle}>\r\n          {routines.map((routine) => (\r\n            <RoutineCard\r\n              routine={routine}\r\n              markRoutineAsDone={this.markRoutineAsDone}\r\n              doneButton={true}\r\n            />\r\n          ))}\r\n        </div>\r\n        {this.state.showModal && this.Modal()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst flexContainerStyle = {\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n};\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nimport { getRoutines } from \"../backend/routes\";\r\n\r\nexport default class extends React.Component {\r\n  getGraph = (routines, month, dayOfMonth) => {\r\n    const data = [[\"Task\", \"Minutes\"]];\r\n    for (const routine of routines) {\r\n      data.push([\r\n        routine.name,\r\n        parseInt(routine.timeNeeded[month][dayOfMonth]),\r\n      ]);\r\n    }\r\n    return (\r\n      <Chart\r\n        width={\"600px\"}\r\n        height={\"400px\"}\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        options={{\r\n          title: \"Your day Today\",\r\n          backgroundColor: \"#546E7A\",\r\n          //   slices: {\r\n          //     0: { color: \"yellow\" },\r\n          //     1: { color: \"orange\" },\r\n          //   },\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  render() {\r\n    const month = this.props.month ? this.props.month : getMonth();\r\n    const dayOfMonth = this.props.dayOfMonth\r\n      ? this.props.month\r\n      : getDayOfMonth();\r\n    return this.getGraph(getRoutines(), month, dayOfMonth);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport { getTimeSpent } from \"../backend/routes\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nexport default class MinutesSpent extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    const month = props.month ? props.month : getMonth();\r\n    const dayOfMonth = props.dayOfMonth ? props.dayOfMonth : getDayOfMonth();\r\n    this.state = {\r\n      month,\r\n      dayOfMonth,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const state = this.props.state | 0;\r\n    const showMetric = this.props.showMetric\r\n      ? this.props.showMetric\r\n      : getTimeSpent;\r\n    const title =\r\n      showMetric === getTimeSpent ? \"Minutes Spent\" : \"Routines Done\";\r\n    const data = [[\"Day\", title]];\r\n    if (state === 2) {\r\n      //months\r\n      for (let month = 0; month <= this.state.month; month++) {\r\n        data.push([`Month ${month + 1}`, showMetric(month, -1, state)]);\r\n      }\r\n    } else {\r\n      for (let day = numDays - 1; day >= 0; day--) {\r\n        let date;\r\n        if (state === 0)\r\n          //days\r\n          date = new Date(\r\n            new Date().getTime() -\r\n              24 * 60 * 60 * 1000 * day -\r\n              4 * 60 * 60 * 1000\r\n          );\r\n        else if (state === 1)\r\n          //weeks\r\n          date = new Date(\r\n            new Date().getTime() -\r\n              24 * 60 * 60 * 1000 * 7 * day -\r\n              4 * 60 * 60 * 1000\r\n          );\r\n        const month = date.getMonth();\r\n        const dayOfMonth = date.getDate() - 1;\r\n        data.push([\r\n          `${month + 1}/${dayOfMonth + 1}`,\r\n          showMetric(month, dayOfMonth, state),\r\n        ]);\r\n      }\r\n    }\r\n    return (\r\n      <Chart\r\n        width={\"600px\"}\r\n        height={\"400px\"}\r\n        chartType=\"BarChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        options={{\r\n          hAxis: {\r\n            title,\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst numDays = 8;\r\n","import Table from \"react-bootstrap/Table\";\r\nimport React from \"react\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nimport { getRoutines } from \"../backend/routes\";\r\nexport default class Log extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    const month = props.month ? props.month : getMonth();\r\n    const dayOfMonth = props.dayOfMonth ? props.dayOfMonth : getDayOfMonth();\r\n    this.state = {\r\n      month,\r\n      dayOfMonth,\r\n      routines: props.routines,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (!this.state.routines) {\r\n      let routines = getRoutines().filter(\r\n        (routine) => routine.done[this.state.month][this.state.dayOfMonth]\r\n      );\r\n      routines.sort(\r\n        (x, y) =>\r\n          x.getStartTime(this.state.month, this.state.dayOfMonth, true) -\r\n          y.getStartTime(this.state.month, this.state.dayOfMonth, true)\r\n      );\r\n      this.setState({\r\n        routines,\r\n      });\r\n    }\r\n  }\r\n\r\n  getTime = (routine) => {\r\n    const month = this.state.month;\r\n    const dayOfMonth = this.state.dayOfMonth;\r\n    const finishTime = routine.touchTime[month][dayOfMonth];\r\n    const hrEnd = finishTime[0],\r\n      minEnd = finishTime[1];\r\n    const toNum = hrEnd * 60 + minEnd;\r\n    let start = toNum - routine.timeNeeded[month][dayOfMonth];\r\n    if (start < 0) start += 24 * 60;\r\n    let hr = Math.floor(start / 60);\r\n    return `${hr}:${start % 60} - ${finishTime[0]}:${finishTime[1]}`;\r\n  };\r\n  render() {\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Time Period</th>\r\n            <th>Routine</th>\r\n            <th>Comment</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {this.state.routines &&\r\n            this.state.routines.map((routine) => (\r\n              <tr>\r\n                <td>{this.getTime(routine)}</td>\r\n                <td>{routine.name}</td>\r\n                <td>{routine.info[this.state.month][this.state.dayOfMonth]}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n","import Table from \"react-bootstrap/Table\";\r\nimport { getRoutineByDay } from \"../backend/routes\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nimport React, { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class CompareDays extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    const month = props.month ? props.month : getMonth();\r\n    const dayOfMonth = props.dayOfMonth ? props.dayOfMonth : getDayOfMonth();\r\n    const date = new Date(\r\n      new Date(2020, month, dayOfMonth + 1).getTime() - 24 * 60 * 60 * 1000\r\n    );\r\n    const monthComp = date.getMonth();\r\n    const dayOfMonthComp = date.getDate() - 1;\r\n    this.state = {\r\n      month,\r\n      dayOfMonth,\r\n      monthComp,\r\n      dayOfMonthComp,\r\n    };\r\n  }\r\n  getData = () => {\r\n    const { month, dayOfMonth, monthComp, dayOfMonthComp } = this.state;\r\n    const data = [\r\n      getRoutineByDay(month, dayOfMonth),\r\n      getRoutineByDay(monthComp, dayOfMonthComp),\r\n    ];\r\n    const routines = data[0].map((routine) => routine);\r\n    for (const routine of data[1]) {\r\n      let found = false;\r\n      for (const addedRoutine of routines)\r\n        if (addedRoutine.name === routine.name) found = true;\r\n      if (!found) routines.push(routine);\r\n    }\r\n    return routines.map((routine) => {\r\n      return {\r\n        name: routine.name,\r\n        done1: routine.done[month][dayOfMonth],\r\n        done2: routine.done[monthComp][dayOfMonthComp],\r\n      };\r\n    });\r\n  };\r\n  update = (date) => {\r\n    this.setState({\r\n      monthComp: date.getMonth(),\r\n      dayOfMonthComp: date.getDate() - 1,\r\n    });\r\n  };\r\n  render() {\r\n    const routines = this.getData();\r\n    return (\r\n      <React.Fragment>\r\n        <Test\r\n          update={this.update}\r\n          monthComp={this.state.monthComp}\r\n          dayOfMonthComp={this.state.dayOfMonthComp}\r\n        ></Test>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Routine</th>\r\n              <th>{`${this.state.monthComp + 1}/${\r\n                this.state.dayOfMonthComp + 1\r\n              }`}</th>\r\n              <th>Today</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {routines &&\r\n              routines.map((routine) => (\r\n                <tr>\r\n                  <td>{routine.name}</td>\r\n                  <td>{routine.done2 ? \"YES\" : \"NO\"}</td>\r\n                  <td>{routine.done1 ? \"YES\" : \"NO\"}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nfunction Test(props) {\r\n  const [startDate, setStartDate] = useState(\r\n    new Date(2020, props.monthComp, props.dayOfMonthComp + 1)\r\n  );\r\n  return (\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={(date) => {\r\n        if (date >= new Date()) {\r\n          alert(\"You are trying to compare with a date in the future\");\r\n          return;\r\n        }\r\n        setStartDate(date);\r\n        props.update(date);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import RoutineCard from \"./RoutineCard\";\r\nimport PieChart from \"./PieChart\";\r\nimport MinutesSpent from \"./MinutesSpent\";\r\nimport Log from \"./Log\";\r\nimport { getTodaysRoutines } from \"../backend/routes\";\r\nimport { getMonth, getDayOfMonth } from \"../backend/helpers\";\r\nimport CompareDays from \"./CompareDays\";\r\n\r\nexport default class Done extends React.Component {\r\n  state = { routines: [] };\r\n  componentDidMount() {\r\n    const month = getMonth();\r\n    const dayOfMonth = getDayOfMonth();\r\n    this.setState({\r\n      routines: getTodaysRoutines().filter(\r\n        (routine) => routine.done[month][dayOfMonth]\r\n      ),\r\n    });\r\n  }\r\n  render() {\r\n    // const routines = this.state.routines;\r\n\r\n    return (\r\n      <div style={flexContainerStyle}>\r\n        <div style={{ flexGrow: \"1\", height: \"100vh\" }}>\r\n          <PieChart></PieChart>\r\n          <Log></Log>\r\n        </div>\r\n        <div style={{ flexGrow: \"1\", height: \"100vh\" }}>\r\n          <MinutesSpent></MinutesSpent>\r\n          <CompareDays></CompareDays>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst flexContainerStyle = {\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  width: \"100%\",\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Todos from \"./components/Todos\";\r\nimport Done from \"./components/Done\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nimport { getPercentageDone } from \"./backend/routes\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todo: true,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ todo: true })}\r\n          >\r\n            To Do\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ todo: false })}\r\n          >\r\n            Done\r\n          </Button>\r\n        </ButtonGroup>\r\n        <ProgressBar\r\n          striped\r\n          variant=\"success\"\r\n          now={getPercentageDone()}\r\n          label={`${getPercentageDone()}%`}\r\n        />\r\n        {this.state.todo && <Todos></Todos>}\r\n        {!this.state.todo && <Done></Done>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { addRoutine } from \"../backend/routes\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass AddRoutine extends React.Component {\r\n  clickWeekend = (e) => {\r\n    let checkboxList = document.querySelectorAll(\".day-item\");\r\n    for (let i = 0; i < 7; i++) checkboxList[i].checked = i >= 5;\r\n  };\r\n  clickAll = (e) => {\r\n    let checkboxList = document.querySelectorAll(\".day-item\");\r\n    checkboxList.forEach((checkbox) => (checkbox.checked = true));\r\n  };\r\n  handleSubmit = (e) => {\r\n    const form = e.target.parentElement;\r\n    let routineName = form.routineName.value;\r\n    let routineTpye = form.type.value;\r\n    let routineUrl = form.url.value;\r\n    let routineTime = form.time.value;\r\n    let weekSchedule = [];\r\n    let checkboxList = document.querySelectorAll(\".day-item\");\r\n    for (const checkbox of checkboxList) weekSchedule.push(checkbox.checked);\r\n    addRoutine(routineName, routineTpye, weekSchedule, routineTime, routineUrl);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form style={{ margin: \"10px\" }}>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Routine Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter Routine Name\"\r\n            name=\"routineName\"\r\n          />\r\n        </Form.Group>\r\n        <input\r\n          type=\"radio\"\r\n          name=\"type\"\r\n          value=\"Daily\"\r\n          onClick={this.clickAll.bind(this)}\r\n        />\r\n        {\"Daily\"}\r\n        <input\r\n          type=\"radio\"\r\n          name=\"type\"\r\n          value=\"Weekly\"\r\n          onClick={this.clickWeekend.bind(this)}\r\n        />\r\n        {\"Weekly\"}\r\n        <ul id=\"days\">\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={0} /> Monday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={1} /> Tuesday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={2} /> Wednesday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={3} /> Thursday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={4} /> Friday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={5} /> Saturday\r\n          </li>\r\n          <li>\r\n            <input type=\"checkbox\" className=\"day-item\" value={6} /> Sunday\r\n          </li>\r\n        </ul>\r\n        <input type=\"text\" name=\"time\" placeholder=\"Time in Minutes\"></input>\r\n        <input type=\"text\" name=\"url\" placeholder=\"Image url\"></input>\r\n\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"submit\"\r\n          onClick={this.handleSubmit.bind(this)}\r\n          href=\"/\"\r\n        >\r\n          Add Routine\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\nexport default AddRoutine;\r\n","import React from \"react\";\r\nexport default class Help extends React.Component {\r\n  render() {\r\n    return <h1>Help</h1>;\r\n  }\r\n}\r\n","import { getRoutines } from \"../backend/routes\";\r\nimport React from \"react\";\r\nimport RoutineCard from \"./RoutineCard\";\r\nexport default class ViewRoutines extends React.Component {\r\n  state = { routines: [] };\r\n  componentDidMount() {\r\n    this.setState({ routines: getRoutines() });\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={flexContainerStyle}>\r\n        {this.state.routines.map((routine) => (\r\n          <RoutineCard routine={routine} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst flexContainerStyle = {\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n};\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nexport default class AlertDismissible extends React.Component {\r\n  state = {\r\n    show: true,\r\n  };\r\n  render() {\r\n    if (this.state.show) {\r\n      return (\r\n        <Alert\r\n          variant={this.props.variant}\r\n          onClose={() => this.setState({ show: false })}\r\n          dismissible\r\n        >\r\n          <Alert.Heading>{this.props.header}</Alert.Heading>\r\n        </Alert>\r\n      );\r\n    }\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nexport default class extends React.Component {\r\n  getGraph = () => {\r\n    const { x, y } = getData(this.props.routine);\r\n    const data = [[\"Week\", \"Times\"]];\r\n    for (let i = 0; i < x.length; i++) {\r\n      data.push([x[i], y[i]]);\r\n    }\r\n\r\n    return (\r\n      <Chart\r\n        width={\"600px\"}\r\n        height={\"400px\"}\r\n        chartType=\"LineChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        options={{\r\n          hAxis: {\r\n            title: \"Week Starting\",\r\n          },\r\n        }}\r\n        rootProps={{ \"data-testid\": \"1\" }}\r\n      />\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>This is how you have been doing in the last {numWeeks} weeks</h2>\r\n        {this.getGraph()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst numWeeks = 6;\r\nconst getData = (routine) => {\r\n  const doneArray = [];\r\n  let currTime = new Date().getTime();\r\n  let rem = numWeeks;\r\n  const labels = [];\r\n  while (rem > 0) {\r\n    let date = new Date(currTime);\r\n    let dayOfWeek = date.getDay() - 1;\r\n    if (dayOfWeek < 0) dayOfWeek += 7;\r\n    let dayOfMonth = date.getDate() - 1;\r\n    let month = date.getMonth();\r\n\r\n    doneArray.push(routine.done[month][dayOfMonth]);\r\n    if (dayOfWeek === 0) {\r\n      rem--;\r\n      labels.push(`${dayOfMonth + 1}/${month + 1}`);\r\n    }\r\n    currTime -= 24 * 60 * 60 * 1000;\r\n  }\r\n  labels.reverse();\r\n  // for (let i = 1; i <= numWeeks; i++) labels.push(`Week ${i}`);\r\n  let data = [];\r\n  while (doneArray.length > 0) {\r\n    let cnt = 0;\r\n    let sz = Math.min(7, doneArray.length);\r\n    while (sz-- > 0) cnt += doneArray.pop() ? 1 : 0;\r\n    data.push(cnt);\r\n  }\r\n\r\n  return { x: labels, y: data };\r\n};\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport { getDaysInMonths } from \"../backend/helpers\";\r\nclass Calendar extends React.Component {\r\n  getData = () => {\r\n    const routine = this.props.routine;\r\n\r\n    const data = [\r\n      [\r\n        { type: \"date\", id: \"Date\" },\r\n        { type: \"number\", id: \"Won/Loss\" },\r\n      ],\r\n    ];\r\n    for (let m = 0; m < 12; m++) {\r\n      for (let d = 0; d < getDaysInMonths(m); d++)\r\n        if (\r\n          routine.active[m][d] &&\r\n          routine.days[getDayOfWeekGivenMYD(m, 2020, d)]\r\n        )\r\n          data.push([new Date(2020, m, d + 1), routine.done[m][d] ? 1 : 0]);\r\n    }\r\n\r\n    return data;\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Chart\r\n            // width={400}\r\n            // height={300}\r\n            chartType=\"Calendar\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={this.getData()}\r\n            options={options}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst getDayOfWeekGivenMYD = (m, y, d) => {\r\n  let ans = new Date(y, m, d + 1).getDay(); //date at m,d is at 12 am so it gets the required ans-1, that's why i changed it\r\n  if (ans === 7) ans = 0;\r\n  return ans;\r\n};\r\nexport default Calendar;\r\nconst options = {\r\n  title: \"Red Sox Attendance\",\r\n  height: 350,\r\n  calendar: {\r\n    cellColor: {\r\n      stroke: \"#6B8E23\",\r\n      strokeOpacity: 0.6,\r\n      strokeWidth: 1,\r\n    },\r\n  },\r\n  colors: [\"#FF0000\", \"#00FF00\"],\r\n};\r\n","import React from \"react\";\r\nimport Alert from \"./Alert\";\r\nimport Graph from \"./Graph\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport {\r\n  deactivateRoutineByName,\r\n  activateRoutineByName,\r\n  deletRoutineByName,\r\n} from \"../backend/routes\";\r\n// import pic from \"../assets/sports1.png\";\r\nimport Calendar from \"./Calendar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport RoutineCard from \"./RoutineCard\";\r\nimport { getMonth, getDayOfMonth, getDayOfWeek } from \"../backend/helpers\";\r\nexport default class RoutineZoomed extends React.Component {\r\n  activateDeactivateButton = () => {\r\n    const month = getMonth();\r\n    const dayOfMonth = getDayOfMonth();\r\n    const routine = this.props.routine;\r\n    if (routine.active[month][dayOfMonth])\r\n      return (\r\n        <Button\r\n          variant=\"warning\"\r\n          onClick={(e) => {\r\n            deactivateRoutineByName(routine.name);\r\n          }}\r\n          href=\"/routines\"\r\n        >\r\n          Deactivate\r\n        </Button>\r\n      );\r\n    else\r\n      return (\r\n        <div>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={(e) => {\r\n              activateRoutineByName(routine.name);\r\n            }}\r\n            href=\"/routines\"\r\n          >\r\n            Activate\r\n          </Button>\r\n          <Button\r\n            variant=\"danger\"\r\n            onClick={(e) => {\r\n              deletRoutineByName(routine.name);\r\n            }}\r\n            href=\"/routines\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </div>\r\n      );\r\n  };\r\n  getStatus = () => {\r\n    const routine = this.props.routine;\r\n    const month = getMonth();\r\n    const dayOfMonth = getDayOfMonth();\r\n    if (!routine.active[month][dayOfMonth]) return <h1>NOT ACTIVE</h1>;\r\n    const dayOfWeek = getDayOfWeek();\r\n    if (!routine.days[dayOfWeek]) return <h1>NOT SCHEDULED TODAY</h1>;\r\n    return routine.done[month][dayOfMonth] ? (\r\n      <h1>\r\n        {`You did it today in ${routine.timeNeeded[month][dayOfMonth]} minutes and info was ${routine.info[month][dayOfMonth]}`}{\" \"}\r\n      </h1>\r\n    ) : (\r\n      <h1>You still have to do it</h1>\r\n    );\r\n  };\r\n  showAlert() {\r\n    const routine = this.props.routine;\r\n    const status = routine.todayStatus();\r\n    if (status === 1)\r\n      return <Alert variant=\"success\" header=\"Congrats\"></Alert>;\r\n    else if (status === -1)\r\n      return <Alert variant=\"danger\" header=\"You still have time!\"></Alert>;\r\n  }\r\n  render() {\r\n    const routine = this.props.routine;\r\n\r\n    return (\r\n      <div style={style}>\r\n        <Button variant=\"primary\" onClick={() => this.setState({ done: true })}>\r\n          Back\r\n        </Button>{\" \"}\r\n        {this.showAlert()}\r\n        <Container>\r\n          <Row>\r\n            <Col style={containerStyle}>\r\n              <RoutineCard routine={routine} zoom={true}></RoutineCard>\r\n            </Col>\r\n            <Col style={containerStyle}>\r\n              {<Graph routine={routine}></Graph>}\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justifyContentMdCenter\">\r\n            <Col style={containerStyle}>\r\n              <Calendar\r\n                style={{ justifyContent: \"center\" }}\r\n                routine={routine}\r\n              ></Calendar>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        {this.activateDeactivateButton()}\r\n        {this.getStatus()}\r\n        {/* <WeeklyBarChart routine={routine}></WeeklyBarChart> */}\r\n        <LastDays routine={routine}></LastDays>\r\n        <CommentDistribution routine={routine}></CommentDistribution>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction LastDays(props) {\r\n  const routine = props.routine;\r\n  const numDays = 7;\r\n  let dates = [];\r\n  let curr = new Date();\r\n  for (let i = getDayOfWeek(); dates.length < numDays; i = (i + 6) % 7) {\r\n    if (routine.days[i]) {\r\n      dates.push(curr);\r\n    }\r\n    curr = new Date(curr.getTime() - 24 * 60 * 60 * 1000);\r\n  }\r\n  dates.reverse();\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Time Period</th>\r\n          <th>Comment</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {dates.map((date) => (\r\n          <tr>\r\n            <td>{date.toDateString()}</td>\r\n            <td>\r\n              {routine.done[getMonth(date)][getDayOfMonth(date)]\r\n                ? routine.getDuration(getMonth(date), getDayOfMonth(date))\r\n                : \"NO\"}\r\n            </td>\r\n            <td>{routine.info[getMonth(date)][getDayOfMonth(date)]}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\nconst style = {\r\n  backgroundColor: \"#D3D3D3\",\r\n};\r\n\r\nconst containerStyle = {\r\n  // borderStyle: \"solid\",\r\n  padding: \"5px\",\r\n  margin: \"20px\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nfunction CommentDistribution(props) {\r\n  const routine = props.routine;\r\n  let map = new Map();\r\n  for (let m = 0; m < 12; m++)\r\n    for (let d = 0; d < 31; d++)\r\n      if (routine.info[m][d] !== \"\") {\r\n        const key = routine.info[m][d];\r\n        let cnt = map.has(key) ? map.get(key) : 0;\r\n        cnt++;\r\n        map.set(key, cnt);\r\n      }\r\n  const data = [[\"Comment\", \"# of Times\"]];\r\n  for (let [comment, cnt] of map) {\r\n    data.push([comment, cnt]);\r\n  }\r\n  if (data.length === 1) return <React.Fragment></React.Fragment>;\r\n  return (\r\n    <Chart\r\n      width={\"600px\"}\r\n      height={\"400px\"}\r\n      chartType=\"PieChart\"\r\n      loader={<div>Loading Chart</div>}\r\n      data={data}\r\n      options={{\r\n        title: \"Your Comments\",\r\n        backgroundColor: \"#546E7A\",\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport MinutesSpent from \"./MinutesSpent\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport {\r\n  getNumRoutinesDone,\r\n  getTimeSpent,\r\n  getRoutines,\r\n  getPercentageDone,\r\n} from \"../backend/routes\";\r\nimport { getDaysInMonths } from \"../backend/helpers\";\r\nexport default class Stats extends React.Component {\r\n  state = { state: 1, showMetric: getNumRoutinesDone };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ state: 0 })}\r\n          >\r\n            Daily\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ state: 1 })}\r\n          >\r\n            Weekly\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ state: 2 })}\r\n          >\r\n            Monthly\r\n          </Button>\r\n        </ButtonGroup>\r\n        <ButtonGroup aria-label=\"Basic example\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ showMetric: getNumRoutinesDone })}\r\n          >\r\n            Number Done\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ showMetric: getTimeSpent })}\r\n          >\r\n            MinutesSpent\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => this.setState({ showMetric: getPercentageDone })}\r\n          >\r\n            Percentage\r\n          </Button>\r\n        </ButtonGroup>\r\n\r\n        <MinutesSpent\r\n          state={this.state.state}\r\n          showMetric={this.state.showMetric}\r\n        ></MinutesSpent>\r\n        <RoutinesFrequency></RoutinesFrequency>\r\n        <HeatMap showMetric={this.state.showMetric}></HeatMap>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction RoutinesFrequency() {\r\n  const routines = getRoutines();\r\n  routines.sort((x, y) => y.numTimesDone() - x.numTimesDone());\r\n  const data = [[\"Routine\", \"Number of times does\"]];\r\n  for (const routine of routines)\r\n    data.push([routine.name, routine.numTimesDone()]);\r\n  return (\r\n    <Chart\r\n      width={\"600px\"}\r\n      height={\"400px\"}\r\n      chartType=\"BarChart\"\r\n      loader={<div>Loading Chart</div>}\r\n      data={data}\r\n      options={{\r\n        hAxis: {\r\n          title: \"Top Routines\",\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\nfunction HeatMap(props) {\r\n  const options = {\r\n    title: \"Heat Map\",\r\n    height: 350,\r\n    calendar: {\r\n      cellColor: {\r\n        stroke: \"#6B8E23\",\r\n        strokeOpacity: 0.6,\r\n        strokeWidth: 1,\r\n      },\r\n    },\r\n    colors: [\"#FF0000\", \"#00FF00\"],\r\n  };\r\n  const data = [\r\n    [\r\n      { type: \"date\", id: \"Date\" },\r\n      { type: \"number\", id: \"Number of times done\" },\r\n    ],\r\n  ];\r\n  for (let m = 0; m < 12; m++) {\r\n    for (let d = 0; d < getDaysInMonths(m, 2020); d++)\r\n      data.push([new Date(2020, m, d + 1), props.showMetric(m, d)]);\r\n  }\r\n\r\n  return (\r\n    <Chart\r\n      chartType=\"Calendar\"\r\n      loader={<div>Loading Chart</div>}\r\n      data={data}\r\n      options={options}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport AddRoutine from \"./components/AddRoutine\";\r\nimport Help from \"./components/Help\";\r\nimport ViewRoutines from \"./components/ViewRoutines\";\r\nimport RoutineZoomed from \"./components/RoutineZoomed\";\r\nimport Stats from \"./components/Stats\";\r\nimport { getRoutineByName } from \"./backend/routes\";\r\nReactDOM.render(\r\n  <Router basename=\"/logger-react\">\r\n    <React.StrictMode>\r\n      <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/logger-react\">Home</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/logger-react/add\">Add</Nav.Link>\r\n          <Nav.Link href=\"/logger-react/help\">Help</Nav.Link>\r\n          <Nav.Link href=\"/logger-react/stats\">Stats</Nav.Link>\r\n          <Nav.Link href=\"/logger-react/routines\">All Routines</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n\r\n      <Switch>\r\n        <Route exact path=\"/add\">\r\n          <AddRoutine />\r\n        </Route>\r\n        <Route exact path=\"/stats\">\r\n          <Stats />\r\n        </Route>\r\n        <Route exact path=\"/help\">\r\n          <Help />\r\n        </Route>\r\n        <Route exact path=\"/routines\">\r\n          <ViewRoutines />\r\n        </Route>\r\n        <Route exact path={`/routines/:routineName`}>\r\n          <Zoom />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <App></App>\r\n        </Route>\r\n      </Switch>\r\n    </React.StrictMode>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\nfunction Zoom() {\r\n  let { routineName } = useParams();\r\n  return <RoutineZoomed routine={getRoutineByName(routineName)} />;\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}